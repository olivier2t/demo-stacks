# YAML anchors
shared:
# Task : sync and merge with rsync 2 rep. Used to merge stack and config
- &merge-stack-and-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: cycloid/cycloid-toolkit
      tag: latest
  run:
    path: /usr/bin/merge-stack-and-config
  outputs:
  - name: merged-stack
    path: "merged-stack"


resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: ((terraform_version))

- name: cycloid-resource
  type: docker-image
  source:
    repository: cycloid/cycloid-resource
    tag: latest

- name: artifact-resource
  type: docker-image
  source:
    repository: pivotalservices/concourse-curl-resource
    tag: latest


resources:
# The terraform backend for the tfstate file
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ((env))
    backend_type: s3
    backend_config:
      bucket: ((terraform_storage_bucket_name))
      key: ((project))-((env)).tfstate
      workspace_key_prefix: ((project))
      region: ((aws_region))
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      aws_access_key: ((aws_access_key))
      aws_secret_key: ((aws_secret_key))
      aws_region: ((aws_region))
      keypair_public: ((keypair_public))
      env: ((env))
      project: ((project))
      customer: ((customer))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

# The resource to check and get the latest app artifact
- name: gitlab-artifact
  type: artifact-resource
  source:
    url: https://gitlab.com/olivier2t/simple-counter-app/-/archive/main/simple-counter-app-main.tar.gz  
    filename: simple-counter-app-main.tar.gz  

# The Cycloid infrapolicy resource to check terraform plan against org rules
- name: infrapolicy
  type: cycloid-resource
  source:
    feature: infrapolicy
    api_key: ((cycloid_api_key))
    api_url: ((cycloid_api_url))
    env: ((env))
    org: ((customer))
    project: ((project))

# Terracost resource
- name: terracost
  type: cycloid-resource
  source:
    feature: terracost
    api_key: ((cycloid_api_key))
    api_url: ((cycloid_api_url))
    env: ((env))
    org: ((customer))
    project: ((project))

# 60 minutes timer to trigger destroy periodically
- name: every-1h
  type: time
  icon: timer
  source:
    interval: 60m

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    paths:
      - ((stack_terraform_path))/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((config_terraform_path))/*

# The Ansible stack (will be merged with the config)
- name: git_stack-ansible
  type: git
  icon: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    paths:
      - ((stack_ansible_path))/*

# The Ansible config (will be merged with the stack)
- name: git_config-ansible
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((config_ansible_path))/*

groups:
- name: overview
  jobs:
    - terraform-plan
    - terraform-apply
    - deploy-app
    
- name: destroy
  jobs:
    - terraform-destroy


jobs:
  # Merge and trigger a plan whenever there is a commit in Terraform stack or config
  - name: terraform-plan
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true

        - get: git_config-terraform
          trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_only: true
          terraform_source: merged-stack/
        get_params:
          # Generate a plan.json file for infrapolicy check - more info at https://github.com/ljfranklin/terraform-resource
          output_planfile: true
      
      # Do the infrapolicy check
      - put: infrapolicy
        params:
          tfplan_path: tfstate/plan.json

      # Do the terracost check
      - put: terracost
        params:
          tfplan_path: tfstate/plan.json


  # Merge and trigger an apply whenever there is a terraform plan passed successfully
  - name: terraform-apply
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: true
          passed:
            - terraform-plan

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_run: true
          terraform_source: merged-stack/


  - name: deploy-app
    serial: true
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-ansible
          params: {depth: 1}
          trigger: true

        - get: git_config-ansible
          params: {depth: 1}
          trigger: true

        - get: tfstate
          trigger: true
          passed:
            - terraform-apply

        - get: gitlab-artifact
          trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-ansible
            path: "config"
          - name: git_stack-ansible
            path: "stack"
          - name: tfstate
            path: "terraform"
        params:
          CONFIG_PATH: ((config_ansible_path))
          STACK_PATH: ((stack_ansible_path))

      - task: run-ansible
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: ((ansible_version))
          run:
            path: /usr/bin/ansible-runner
          caches:
            - path: ansible-playbook/roles
          inputs:
          - name: merged-stack
            path: ansible-playbook
          - name: gitlab-artifact

        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
          AWS_DEFAULT_REGION: ((aws_region))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: site.yml
          EXTRA_ANSIBLE_VARS:
            env: ((env))
            project: ((project))
            customer: ((customer))


  # Destroy the demo infrastructure after its creation (after a timer and every hour)
  - name: terraform-destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: true
          passed:
            - terraform-apply

        # In case of fail, it will help to retry every 1h to make sure the terraform is destroyed
        - get: every-1h
          trigger: true

      # Timer to make sure the infra is destroyed at least 1 hour after creation
      - task: wait-a-bit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
          run:
            path: /bin/bash
            args:
              - '-ec'
              - |
                sleep 3600

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy

      - task: pipeline-cleanup
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
          run:
            path: /bin/bash
            args:
              - '-c'
              - |
                echo "Login to Cycloid API:"
                cy login --org ${ORGANIZATION} --api-key ${API_KEY} >output
                if [[ "$?" != "0" ]]; then
                    echo "Login Error: cy returned code $?"
                    cat output
                    exit 1
                fi
                echo "Pause pipeline:"
                cy pipeline pause \
                --org ${ORGANIZATION} \
                --project ${PROJECT} \
                --env ${ENV} \
                --api-url ${API_URL} >output
                if [[ "$?" != "0" ]]; then
                    echo "Pause Pipeline Error: cy returned code $?"
                    cat output
                    exit 1
                fi

          params:
            ORGANIZATION: ((customer))
            PROJECT: ((project))
            ENV: ((env))
            API_URL: ((cycloid_api_url))
            API_KEY: ((cycloid_api_key))