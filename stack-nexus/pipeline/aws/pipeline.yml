# YAML anchors
shared:
# Task : sync and merge with rsync 2 rep. Used to merge stack and config
- &merge-stack-and-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: cycloid/cycloid-toolkit
      tag: latest
  run:
    path: /usr/bin/merge-stack-and-config
  outputs:
  - name: merged-stack
    path: "merged-stack"


resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: ((terraform_version))

- name: cycloid-resource
  type: docker-image
  source:
    repository: cycloid/cycloid-resource
    tag: latest

- name: slack-notification
  type: docker-image
  source:
    registry_mirror: 'https://registry-mirror.owl.cycloid.io'
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: cycloid-events
  type: docker-image
  source:
    registry_mirror: 'https://registry-mirror.owl.cycloid.io'
    repository: cycloid/cycloid-events-resource
    tag: latest


resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ((env))
    backend_type: s3
    backend_config:
      bucket: ((terraform_storage_bucket_name))
      key: ((project))-((env)).tfstate
      workspace_key_prefix: ((project))
      region: ((aws_region))
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      aws_access_key: ((aws_access_key))
      aws_secret_key: ((aws_secret_key))
      aws_region: ((aws_region))
      keypair_public: ((keypair_public))
      env: ((env))
      project: ((project))
      customer: ((customer))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

# The Cycloid infrapolicy resource to check terraform plan against org rules
- name: infrapolicy
  type: cycloid-resource
  source:
    feature: infrapolicy
    api_key: ((cycloid_api_key))
    api_url: ((cycloid_api_url))
    env: ((env))
    org: ((customer))
    project: ((project))

# The Cycloid event resource to log events
- name: cycloid-event
  type: cycloid-events
  source:
    api_key: ((cycloid_api_key))
    api_url: ((cycloid_api_url))
    icon: fa-code-branch
    organization: ((customer))
    severity: info
    type: Custom
    tags:
      - key: project
        value: ((project))
      - key: env
        value: ((env))
  icon: calendar

# The Slack notification resource to send alerts
- name: slack-alert
  type: slack-notification
  source:
    url: ((slack_hook))
  icon: slack

# 60 minutes timer to trigger destroy periodically
- name: every-1h
  type: time
  icon: timer
  source:
    interval: 60m

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    paths:
      - ((stack_terraform_path))/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((config_terraform_path))/*

# The Ansible stack (will be merged with the config)
- name: git_stack-ansible
  type: git
  icon: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    paths:
      - ((stack_ansible_path))/*

# The Ansible config (will be merged with the stack)
- name: git_config-ansible
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((config_ansible_path))/*

groups:
- name: overview
  jobs:
    - terraform-plan
    - terraform-apply
    - deploy-nexus
    - post-deployment
    
- name: destroy
  jobs:
    - terraform-destroy


jobs:
  # Merge and trigger a plan whenever there is a commit in Terraform stack or config
  - name: terraform-plan
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true

        - get: git_config-terraform
          trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_only: true
          terraform_source: merged-stack/
        get_params:
          # Generate a plan.json file for infrapolicy check - more info at https://github.com/ljfranklin/terraform-resource
          output_planfile: true
      
      # Do the infrapolicy check
      - put: infrapolicy
        params:
          tfplan_path: tfstate/plan.json


  # Merge and trigger an apply whenever there is a terraform plan passed successfully
  - name: terraform-apply
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: true
          passed:
            - terraform-plan

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_run: true
          terraform_source: merged-stack/


  - name: deploy-nexus
    serial: true
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-ansible
          params: {depth: 1}
          trigger: true

        - get: git_config-ansible
          params: {depth: 1}
          trigger: true

        - get: tfstate
          trigger: true
          passed:
            - terraform-apply

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-ansible
            path: "config"
          - name: git_stack-ansible
            path: "stack"
          - name: tfstate
            path: "terraform"
        params:
          CONFIG_PATH: ((config_ansible_path))
          STACK_PATH: ((stack_ansible_path))

      - task: run-ansible
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: ((ansible_version))
          run:
            # Extract terraform metadata into shell and yaml scripts and store them into a new terraform-env resource
            path: /bin/bash
            args:
              - '-ec'
              - |
                python -c "import json; print('\n'.join([ '%s: \"%s\"' % (k,v) for k, v in json.load(open('terraform/metadata', 'r')).items()]))" | tee terraform-env/env.yml
                python -c "import json; print('\n'.join([ '%s=%s' % (k,v) for k, v in json.load(open('terraform/metadata', 'r')).items()]))" | tee terraform-env/env
                source <(grep 'bastion\|nexus' terraform-env/env)
                export SSH_JUMP_URL="$bastion_user@$bastion_ip"
                echo "Ansible connects via bastion using $SSH_JUMP_URL"
                echo "Nexus Repository will be accessible at http://$nexus_ip:$nexus_port"
                echo "Admin password: $nexus_admin_password"
                /usr/bin/ansible-runner
          caches:
            - path: ansible-playbook/roles
          inputs:
          - name: merged-stack
            path: ansible-playbook
          - name: tfstate
            path: "terraform"
          outputs:
          - name: tfstate-env
            path: terraform-env

        params:
          #+ Parameters of ansible-runner script. Can be found here: https://github.com/cycloidio/docker-cycloid-toolkit#ansible-runner
          SSH_PRIVATE_KEY: ((keypair_private))
          AWS_ACCESS_KEY_ID: ((aws_access_key))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
          AWS_DEFAULT_REGION: ((aws_region))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: site.yml
          EXTRA_ANSIBLE_VARS:
            env: ((env))
            project: ((project))
            customer: ((customer))

        on_success:
          do:
            - put: slack-alert
              params:
                env_file: tfstate-env/env
                attachments:
                  - author_link: 'https://www.cycloid.io/'
                    author_name: cycloid.io
                    color: good
                    fallback: 'Nexus Repository successfully deployed'
                    fields:
                      - short: true
                        title: Project
                        value: ((project))
                      - short: true
                        title: Environment
                        value: ((env))
                    pretext: Nexus Repository was deployed successfully.
                    title: '[SUCCESS]'
                    title_link: 'https://console.cycloid.io/organizations/((customer))/projects/((project))/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_ID'
                    text: |
                      Nexus Repository url: http://$nexus_ip:$nexus_port
                      Nexus Admin Password: $nexus_admin_password

            - put: cycloid-event
              params:
                vars_file: tfstate-env/env.yml
                severity: info
                message: |
                        The project ((project)) on ((env)) environment has been deployed successfully.
                        </br>
                        <ul>
                        <li>Nexus Repository url: <em><a target="_blank" href="http://$nexus_ip:$nexus_port">http://$nexus_ip:$nexus_port</a></em></li>
                        <li>Nexus Admin Password: $nexus_admin_password</li>
                        </ul>
                title: The project ((project)) on ((env)) environment deployed successfully


  - name: post-deployment
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - get: tfstate
        trigger: true
        passed:
          - deploy-nexus

      - do:
        - task: configure-project-backends
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: cycloid/cycloid-toolkit
            run:
              path: /bin/bash
              args:
                - '-c'
                - |
                  echo "Login to Cycloid API:"
                  cy login --org ${ORGANIZATION} --api-key ${API_KEY} >output
                  if [[ "$?" != "0" ]]; then
                      echo "Login Error: cy returned code $?"
                      cat output
                      exit 1
                  fi
                  echo "Configuring infraView:"
                  cy external-backend create infraview AWSRemoteTFState \
                  --org ${ORGANIZATION} \
                  --project ${PROJECT} \
                  --env ${ENV} \
                  --api-url ${API_URL} \
                  --bucket-name ${BUCKET_NAME} \
                  --bucket-path ${BUCKET_PATH} \
                  --region ${AWS_REGION} \
                  --cred ${EXTERNAL_BACKEND_AWS_CRED_NAME} >output
                  if [[ "$?" != "0" ]]; then
                      echo "Configuring InfraView Error: cy returned code $?"
                      cat output
                      exit 1
                  fi

          params:
            ORGANIZATION: ((customer))
            PROJECT: ((project))
            ENV: ((env))
            API_URL: ((cycloid_api_url))
            API_KEY: ((cycloid_api_key))
            BUCKET_NAME: ((terraform_storage_bucket_name))
            BUCKET_PATH: ((project))/((env))/((project))-((env)).tfstate
            AWS_REGION: ((aws_region))
            EXTERNAL_BACKEND_AWS_CRED_NAME: ((external_backend_aws_cred_name))


  # Destroy the demo infrastructure after its creation (after a timer and every hour)
  - name: terraform-destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: true
          passed:
            - terraform-apply

        # In case of fail, it will help to retry every 1h to make sure the terraform is destroyed
        - get: every-1h
          trigger: true

      # Timer to make sure the infra is destroyed at least 1 hour after creation
      - task: wait-a-bit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
          run:
            path: /bin/bash
            args:
              - '-ec'
              - |
                sleep 3600

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy

      - task: pipeline-cleanup
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
          run:
            path: /bin/bash
            args:
              - '-c'
              - |
                echo "Login to Cycloid API:"
                cy login --org ${ORGANIZATION} --api-key ${API_KEY} >output
                if [[ "$?" != "0" ]]; then
                    echo "Login Error: cy returned code $?"
                    cat output
                    exit 1
                fi
                echo "Pause pipeline:"
                cy pipeline pause \
                --org ${ORGANIZATION} \
                --project ${PROJECT} \
                --env ${ENV} \
                --api-url ${API_URL} >output
                if [[ "$?" != "0" ]]; then
                    echo "Pause Pipeline Error: cy returned code $?"
                    cat output
                    exit 1
                fi

          params:
            ORGANIZATION: ((customer))
            PROJECT: ((project))
            ENV: ((env))
            API_URL: ((cycloid_api_url))
            API_KEY: ((cycloid_api_key))

        on_failure:
          put: slack-alert
          params:
            env_file: tfstate-env/env
            attachments:
              - author_link: 'https://www.cycloid.io/'
                author_name: cycloid.io
                color: danger
                title: '[FAILED]'
                title_link: 'https://console.cycloid.io/organizations/((customer))/projects/((project))/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_ID'
                pretext: Terraform destroy FAILED.
                fallback: 'Fail to destroy Nexus Repository demo project'
                fields:
                  - short: true
                    title: Project
                    value: ((project))
                  - short: true
                    title: Environment
                    value: ((env))