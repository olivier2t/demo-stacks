# YAML anchors
shared:
# Task : sync and merge with rsync 2 rep. Used to merge stack and config
- &merge-stack-and-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: cycloid/cycloid-toolkit
      tag: latest
  run:
    path: /usr/bin/merge-stack-and-config
  outputs:
  - name: merged-stack
    path: "merged-stack"


resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: ((terraform_version))

- name: slack-notification
  type: docker-image
  source:
    registry_mirror: 'https://registry-mirror.owl.cycloid.io'
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: cycloid-events
  type: docker-image
  source:
    registry_mirror: 'https://registry-mirror.owl.cycloid.io'
    repository: cycloid/cycloid-events-resource
    tag: latest


resources:
# The Cycloid event resource to log events
- name: cycloid-events
  type: cycloid-events
  source:
    api_key: ((cycloid_api_key))
    api_url: 'https://http-api.cycloid.io'
    icon: fa-code-branch
    organization: ((customer))
    severity: info
    type: Custom
    tags:
      - key: project
        value: ((project))
      - key: env
        value: ((env))
  icon: calendar

# The Slack notification resource to send alerts
- name: slack-alert
  type: slack-notification
  source:
    url: ((slack_hook))
  icon: slack

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    paths:
      - ((stack_terraform_path))/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((config_terraform_path))/*

# The Ansible stack (will be merged with the config)
- name: git_stack-ansible
  type: git
  icon: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    paths:
      - ((stack_ansible_path))/*

# The Ansible config (will be merged with the stack)
- name: git_config-ansible
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((config_ansible_path))/*

- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ((env))
    backend_type: s3
    backend_config:
      bucket: ((terraform_storage_bucket_name))
      key: ((project))-((env)).tfstate
      workspace_key_prefix: ((project))
      region: ((aws_region))
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      aws_access_key: ((aws_access_key))
      aws_secret_key: ((aws_secret_key))
      aws_region: ((aws_region))
      cidr: ((cidr))
      private_subnets: ((private_subnets))
      public_subnets: ((public_subnets))
      bastion_allowed_networks: ((bastion_allowed_networks))
      bastion_instance_type: ((bastion_instance_type))
      nexus_instance_type: ((nexus_instance_type))
      nexus_disk_size: ((nexus_disk_size))
      keypair_public: ((keypair_public))
      env: ((env))
      project: ((project))
      customer: ((customer))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

groups:
- name: overview
  jobs:
    - terraform-plan
    - terraform-apply
    - deploy-nexus
    
- name: destroy
  jobs:
    - terraform-destroy


jobs:
  # Merge and trigger a plan whenever there is a commit in Terraform stack or config
  - name: terraform-plan
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true

        - get: git_config-terraform
          trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_only: true
          terraform_source: merged-stack/

  # Merge and trigger an apply manually (no autostart of this job)
  - name: terraform-apply
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: true
          passed:
            - terraform-plan

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_run: true
          terraform_source: merged-stack/

  - name: deploy-nexus
    serial: true
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-ansible
          params: {depth: 1}
          trigger: true

        - get: git_config-ansible
          params: {depth: 1}
          trigger: true

        - get: tfstate
          trigger: true
          passed:
            - terraform-apply

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-ansible
            path: "config"
          - name: git_stack-ansible
            path: "stack"
          - name: tfstate
            path: "terraform"
        params:
          CONFIG_PATH: ((config_ansible_path))
          STACK_PATH: ((stack_ansible_path))

      - task: run-ansible
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: ((ansible_version))
          run:
            path: /bin/bash
            args:
              - '-ec'
              - |
                python -c "import json; print('\n'.join([ '%s=%s' % (k,v) for k, v in json.load(open('tfstate/metadata', 'r')).items()]))" | tee tfstate/env
                python -c "import json; print('\n'.join([ '%s: %s' % (k,v) for k, v in json.load(open('tfstate/metadata', 'r')).items()]))" | tee tfstate/env.yml
                export SSH_JUMP_URL="$(cat tfstate/metadata | jq -r .bastion_user)@$(cat tfstate/metadata | jq -r .bastion_ip)"
                /usr/bin/ansible-runner
          caches:
            - path: ansible-playbook/roles
          inputs:
          - name: merged-stack
            path: ansible-playbook
          - name: tfstate

        params:
          #+ Parameters of ansible-runner script. Can be found here: https://github.com/cycloidio/docker-cycloid-toolkit#ansible-runner
          SSH_PRIVATE_KEY: ((keypair_private))
          AWS_ACCESS_KEY_ID: ((aws_access_key))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
          AWS_DEFAULT_REGION: ((aws_region))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: site.yml
          EXTRA_ANSIBLE_VARS:
            env: ((env))
            project: ((project))
            customer: ((customer))

      on_success:
        do:
          - put: slack-alert
            params:
              env_file: tfstate/env
              attachments:
                - author_link: 'https://www.cycloid.io/'
                  author_name: cycloid.io
                  color: good
                  fallback: 'Nexus Repository successfully deployed'
                  fields:
                    - short: true
                      title: Project
                      value: ((project))
                    - short: true
                      title: Environment
                      value: ((env))
                  pretext: Nexus Repository was deployed successfully.
                  title: '[SUCCESS]'
                  title_link: 'https://console.cycloid.io/projects/((customer))/((project))/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_ID'
                  text: |
                    Nexus Repository url :
                    http://$nexus_ip:$nexus_port
          - put: cycloid-events
            params:
              vars_file: tfstate/env.yml
              severity: info
              message: |
                       The project ((project)) on ((env)) environment has been deployed successfully.
                       </br>
                       <ul>
                       <li><em><a target="_blank" href="http://$nexus_ip:$nexus_port">Access to Nexus Repository</a></em></li>
                       </ul>
              title: The project ((project)) on ((env)) environment deployed successfully


  - name: terraform-destroy
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false

        - get: git_config-terraform
          trigger: false

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy