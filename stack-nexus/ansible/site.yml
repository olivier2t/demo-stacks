---
- name: install Nexus Repository
  hosts: tag_role_nexus:&tag_project_{{ project }}:&tag_cycloid_io_true:&tag_env_{{ env }}
  become: yes

  vars_files:
    - "environments/default_nexus.yml"
    - ["environments/{{ env }}-nexus.yml", "environments/empty.yml"]

  tasks:
  # Creating nexus user and group
  - name: Add group "nexus"
    group:
      name: "{{ nexus_os_group }}"
      state: present

  - name: Add user "nexus"  
    user:
      name: "{{ nexus_os_user }}"
      groups: "{{ nexus_os_group }}"
      shell: "/bin/bash"
      state: present

  # Increasing max number of open files on the system for the user nexus
  - name: Set file descriptor limit to 65536  
    sysctl:
      name: fs.file-max
      value: 65536
      sysctl_file: /etc/sysctl.conf
      reload: yes

  - name: Add nofile soft limit for the user nexus  
    pam_limits:
      domain: nexus
      limit_type: soft
      limit_item: nofile
      value: 65536

  - name: Add nofile hard limit for the user nexus  
    pam_limits:
      domain: nexus
      limit_type: hard
      limit_item: nofile
      value: 65536

  # Installing JAVA
  - name: Install openjdk 8
    apt:
      name: "openjdk-{{ java_version }}-jdk"
      state: present

  - name: make sure /etc/profile.d exists
    file: 
      path: /etc/profile.d
      state: directory

  - name: export JAVA_HOME and add its bin dir in the PATH
    template:
      src:  java_home.sh.j2
      dest: /etc/profile.d/java_home.sh
      mode: "a+x"

  # Stop nexus service if already installed
  - name: Check if nexus service is installed
    stat:
      path: /etc/systemd/system/nexus.service
    register: nexus_service_file

  - name: Stop nexus service
    shell: 'systemctl stop nexus.service'
    when: nexus_service_file.stat.exists

  # Installing Nexus Repository
  - name: Ensure Nexus installation directory exists
    file:
      path: "{{ nexus_installation_dir }}"
      state: "directory"

  - name: Download and unarchive Nexus Repository installer
    unarchive:
      src: "http://download.sonatype.com/nexus/3/{{ nexus_package }}"
      dest: "{{ nexus_installation_dir }}"
      remote_src: yes
      owner: nexus
      group: nexus
      creates: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"

  - name: create or update symlink nexus-latest
    file:
      path: "{{ nexus_installation_dir }}/nexus-latest"
      src: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
      owner: "{{ nexus_os_user }}"
      group: "{{ nexus_os_group }}"
      state: link

  # - name: create symlink nexus-latest
  #   shell: ls -d /opt/nexus-3*
  #   register: src_nexus
  # - stat:
  #     path: /opt/nexus-latest
  #   register: dest_nexus
  # - command: ln -s {{ src_nexus.stdout }} /opt/nexus-latest
  #   when: dest_nexus.stat.isdir is not defined

  - name: copy nexus.rc
    template:
      src: nexus.rc.j2
      dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.rc"
      owner: nexus
      group: nexus

  - name: Setup default timezone
    lineinfile:
      dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
      regexp: "^-Duser.timezone=.*"
      line: "-Duser.timezone={{ nexus_timezone }}"

  - name: Set NEXUS_HOME for the service user
    lineinfile:
      dest: "/home/{{ nexus_os_user }}/.bashrc"
      regexp: "^export NEXUS_HOME=.*"
      line: "export NEXUS_HOME={{ nexus_installation_dir }}/nexus-latest"

  - name: Set nexus port
    lineinfile:
      dest: "{{ nexus_installation_dir }}/nexus-latest/etc/nexus-default.properties"
      regexp: "^application-port=.*"
      line: "application-port={{ nexus_default_port }}"

  # - name: Bind nexus service to 127.0.0.1 only
  #   lineinfile:
  #     dest: "{{ nexus_default_settings_file }}"
  #     regexp: "^application-host=.*"
  #     line: "application-host=127.0.0.1"

  # Installing nexus as a service and enable it
  - name: copy systemd service configuration
    template:
      src: "nexus.service.j2"
      dest: "/etc/systemd/system/nexus.service"

  - name: Reload nexus service configuration
    shell: 'systemctl daemon-reload'

  - name: Enable nexus service
    shell: 'systemctl enable nexus.service'

  - name: Restart nexus service
    shell: 'systemctl restart nexus.service'

  - name: Waiting for nexus to be ready...
    wait_for:
      host: "{{ nexus_ip }}"
      port: "{{ nexus_default_port }}"
      delay: 5

  # - name: Configure nexus service
  #   systemd:
  #     name: nexus.service
  #     enabled: yes
  #     daemon_reload: yes

  # - name: Restart service nexus
  #   service:
  #     name: nexus.service
  #     state: restarted


  # - name: First-time install admin password
  #   set_fact:
  #     current_nexus_admin_password: 'admin123'
  #   when: nexus_data_dir_contents.stdout == ""

  # - name: Subsequent re-provision admin password
  #   set_fact:
  #     current_nexus_admin_password: "{{ nexus_admin_password }}"
  #   when: nexus_data_dir_contents.stdout != ""
  #   no_log: true

  # - include: call_script.yml
  #   vars:
  #     script_name: update_admin_password
  #     args:
  #       new_password: "{{ nexus_admin_password }}"

  # - name: Admin password changed
  #   set_fact:
  #     current_nexus_admin_password: "{{ nexus_admin_password }}"
  #   no_log: true